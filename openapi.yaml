openapi: 3.1.0

# Project variables for API configuration
x-project-variables:
  baseUrl:
    default: https://api.contazen.ro/v1
    description: Base URL for API requests
    enum:
      - https://api.contazen.ro/v1
  apiKey:
    default: Bearer YOUR_API_KEY
    description: Authorization header with Bearer token
    example: Bearer sk_live_YOUR_API_KEY

info:
  title: Contazen API
  version: 1.2.0
  description: |
    Build powerful integrations with the Contazen invoicing platform. The Contazen API is organized around REST, 
    has predictable resource-oriented URLs, accepts JSON request bodies, returns JSON-encoded responses, 
    and uses standard HTTP response codes, authentication, and verbs.
    
    ## Authentication
    The API uses Bearer token authentication. Include your API key in the Authorization header.
    
    ### Getting your API Key
    1. Log in to your Contazen account
    2. Navigate to Settings > API
    3. Generate or copy your API key (starts with `sk_live_` for production or `sk_test_` for testing)
    
    ### Using the API Key
    Include your API key in the Authorization header:
    ```
    Authorization: Bearer sk_live_YOUR_API_KEY
    ```
    
    ### Example Request with cURL
    ```bash
    curl --request GET \
      --url https://api.contazen.ro/v1/clients \
      --header 'Authorization: Bearer sk_live_YOUR_API_KEY' \
      --header 'Accept: application/json'
    ```
    
    ## Rate Limiting
    - 1000 requests per hour per API key
    - 100 create operations per minute per API key
    
    Rate limit information is included in response headers:
    - `X-RateLimit-Limit`: Maximum requests allowed
    - `X-RateLimit-Remaining`: Requests remaining
    - `X-RateLimit-Reset`: Reset time (Unix timestamp)
    
    ## Pagination
    All list endpoints return paginated results with the following format:
    ```json
    {
      "success": true,
      "data": {
        "object": "list",
        "data": [...],
        "has_more": true,
        "total": 245,
        "page": 1,
        "per_page": 50,
        "total_pages": 5
      },
      "meta": {
        "version": "v1",
        "request_id": "req_1a2b3c4d",
        "response_time": "23.45ms"
      }
    }
    ```
    
    ## Multi-Work-Point Access
    API keys belong to a specific work point but can access data from all work points
    within the same parent company.
    
    ## Error Handling
    The API uses conventional HTTP response codes to indicate success or failure. 
    In general: 2xx codes indicate success, 4xx codes indicate an error due to the 
    information provided, and 5xx codes indicate an error with Contazen's servers.
    
    ## Expanding Nested Objects
    Many endpoints support the `expand` parameter to include related objects in the response.
    This follows the Stripe API pattern. For example:
    - `expand[]=lines` - Include invoice line items
    - `expand[]=payments` - Include payment records
    - `expand[]=client` - Include full client object
    
    ## Localization
    The API supports multiple languages through:
    - `locale` query parameter (en, ro)
    - `Accept-Language` header
    - Default: English
    
  contact:
    name: Contazen Support
    email: support@contazen.ro
    url: https://contazen.ro
  license:
    name: Proprietary
    url: https://www.contazen.ro/termeni-si-conditii-de-utilizare/
    
servers:
  - url: https://api.contazen.ro/v1
    description: Production API server

tags:
  - name: Authentication
    description: API authentication and test endpoints
  - name: Clients
    description: Manage your customers (B2B and B2C)
  - name: Invoices
    description: Create and manage invoices, proformas, and receipts
  - name: Products
    description: Manage your product and service catalog
  - name: Expenses
    description: Track and manage business expenses
  - name: Expense Categories
    description: Organize expenses with categories
  - name: Suppliers
    description: Manage expense suppliers and vendors
  - name: Settings
    description: API settings and configuration

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Use your API key (sk_live_xxx or sk_test_xxx)
      
  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        data:
          type: object
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          
    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          default: false
        error:
          type: object
          required:
            - message
            - type
            - code
          properties:
            message:
              type: string
              description: Human-readable error message
            type:
              type: string
              enum:
                - api_error
                - authentication_error
                - invalid_request_error
                - rate_limit_error
                - permission_error
                - validation_error
            code:
              type: string
              description: Machine-readable error code
            param:
              type: string
              description: The parameter that caused the error
            doc_url:
              type: string
              format: uri
              description: URL to relevant documentation
        meta:
          $ref: '#/components/schemas/ResponseMeta'
          
    ResponseMeta:
      type: object
      properties:
        version:
          type: string
          default: v1
        request_id:
          type: string
          format: uuid
          description: Unique request identifier for debugging
        response_time:
          type: string
          example: "23.45ms"
          
    PaginationMeta:
      type: object
      properties:
        object:
          type: string
          default: list
        has_more:
          type: boolean
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer
          
    Client:
      type: object
      required:
        - id
        - object
        - name
      properties:
        id:
          type: string
          description: Unique identifier (CzUid)
          example: "cli_1a2b3c4d5e"
        object:
          type: string
          default: client
        name:
          type: string
          description: Client name
        type:
          type: string
          enum: [person, company]
          default: company
        email:
          type: string
          format: email
        phone:
          type: string
        cui:
          type: string
          description: Tax identification number (CIF/CUI)
        cui_prefix:
          type: string
          description: Country prefix for CUI (e.g., RO)
          default: RO
        rc:
          type: string
          description: Trade register number
        address:
          type: string
        city:
          type: string
        county:
          type: string
        country:
          type: string
          default: RO
        postal_code:
          type: string
        iban:
          type: string
        bank_name:
          type: string
        contact_person:
          type: string
        notes:
          type: string
        is_active:
          type: boolean
          default: true
        is_firm:
          type: boolean
          description: True for companies (B2B), false for individuals (B2C)
        created_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
          
    ClientList:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginationMeta'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Client'
                
    ClientCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        type:
          type: string
          enum: [person, company]
          default: company
        email:
          type: string
          format: email
        phone:
          type: string
        cui:
          type: string
          description: Tax identification number
        cui_prefix:
          type: string
          default: RO
        rc:
          type: string
          description: Trade register number
        address:
          type: string
        city:
          type: string
        county:
          type: string
        country:
          type: string
          default: RO
        postal_code:
          type: string
        iban:
          type: string
        bank_name:
          type: string
        contact_person:
          type: string
        notes:
          type: string
          
    ClientUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        type:
          type: string
          enum: [person, company]
        email:
          type: string
          format: email
        phone:
          type: string
        cui:
          type: string
        cui_prefix:
          type: string
        rc:
          type: string
        address:
          type: string
        city:
          type: string
        county:
          type: string
        country:
          type: string
        postal_code:
          type: string
        iban:
          type: string
        bank_name:
          type: string
        contact_person:
          type: string
        notes:
          type: string
        is_active:
          type: boolean
          
    Invoice:
      type: object
      required:
        - id
        - object
        - number
        - series
        - date
        - total
      properties:
        id:
          type: string
          description: Unique identifier (CzUid)
          example: "inv_1a2b3c4d5e"
        object:
          type: string
          default: invoice
        number:
          type: string
        series:
          type: string
        full_number:
          type: string
          description: Combined series and number
        date:
          type: string
          format: date
        due_date:
          type: string
          format: date
        client_id:
          type: string
        client:
          $ref: '#/components/schemas/Client'
        currency:
          type: string
          default: RON
        exchange_rate:
          type: number
          description: Exchange rate to RON if foreign currency
        subtotal:
          type: number
          description: Total without VAT
        vat_amount:
          type: number
          description: Total VAT amount
        total:
          type: number
          description: Total including VAT
        subtotal_ron:
          type: number
          description: Subtotal in RON (for foreign currency invoices)
        vat_amount_ron:
          type: number
          description: VAT amount in RON (for foreign currency invoices)
        total_ron:
          type: number
          description: Total in RON (for foreign currency invoices)
        items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        is_paid:
          type: boolean
          description: Payment status (excludes voided invoices)
        paid_at:
          type: string
          format: date
        is_void:
          type: boolean
        voided_at:
          type: string
          format: date-time
        void_reason:
          type: string
        is_draft:
          type: boolean
        is_storno:
          type: boolean
          description: True if this is a storno (reversal) invoice
        storno_for:
          type: string
          description: CzUid of the original invoice if this is a storno
        document_type:
          type: string
          enum:
            - fiscal
            - proforma
            - receipt
        payment_method:
          type: string
        notes:
          type: string
        observations:
          type: string
        efactura_enabled:
          type: boolean
          description: Whether e-Factura submission is enabled
        efactura_status:
          type: string
          enum: [pending, submitted, accepted, rejected, error]
        efactura_submission_id:
          type: string
        created_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
          
    InvoiceList:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginationMeta'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Invoice'
            totals:
              type: object
              description: Aggregated totals for all invoices matching the filters
              properties:
                subtotal:
                  type: number
                  format: float
                  example: 1380871.63
                  description: Total amount without VAT
                vat:
                  type: number
                  format: float
                  example: 192519.84
                  description: Total VAT amount
                total:
                  type: number
                  format: float
                  example: 1573391.47
                  description: Total amount including VAT
                paid:
                  type: number
                  format: float
                  example: 1450000.00
                  description: Total amount of paid invoices
                unpaid:
                  type: number
                  format: float
                  example: 123391.47
                  description: Total amount of unpaid invoices
                
    InvoiceItem:
      type: object
      required:
        - description
        - quantity
        - price
      properties:
        id:
          type: integer
          description: Line item ID
        product_id:
          type: string
          description: Product CzUid if linked to catalog
        description:
          type: string
        description_extended:
          type: string
          description: Extended description or notes
        quantity:
          type: number
        price:
          type: number
          description: Unit price without VAT
        vat_rate:
          type: number
          default: 19
          enum: [0, 5, 9, 11, 19, 21]
        vat_key:
          type: integer
          description: VAT key for special exemptions (auto-determined from vat_rate)
        unit:
          type: string
          default: buc
        ubl_um:
          type: string
          description: UBL unit of measure code for e-Factura
          default: H87
        ubl_nc:
          type: string
          description: Combined Nomenclature code for e-Factura
        ubl_cpv:
          type: string
          description: Common Procurement Vocabulary code for e-Factura
        subtotal:
          type: number
          description: Line total without VAT
        vat_amount:
          type: number
          description: Line VAT amount
        total:
          type: number
          description: Line total including VAT
        save_as_product:
          type: boolean
          description: Whether to save this item as a product in catalog
          
    Payment:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
        payment_date:
          type: string
          format: date
        payment_method:
          type: string
        observations:
          type: string
        created_at:
          type: string
          format: date-time
          
    InvoiceCreateRequest:
      type: object
      oneOf:
        - required: [client_id, items]
        - required: [client_data, items]
      properties:
        client_id:
          type: string
          description: Existing client CzUid (required if client_data not provided)
        client_data:
          type: object
          description: Inline client creation (required if client_id not provided)
          properties:
            type:
              type: string
              enum: [b2b, b2c]
              description: Client type - b2b for companies, b2c for individuals
            name:
              type: string
              required: true
            email:
              type: string
              format: email
            phone:
              type: string
            cui:
              type: string
              description: Tax ID (required for b2b)
            rc:
              type: string
              description: Trade register number
            address:
              type: string
            city:
              type: string
            county:
              type: string
            country:
              type: string
              default: RO
            postal_code:
              type: string
            iban:
              type: string
            bank:
              type: string
            contact_person:
              type: string
        series_id:
          type: string
          description: Invoice series CzUid
        date:
          type: string
          format: date
          description: Invoice date (defaults to today)
        due_date:
          type: string
          format: date
          description: Payment due date
        currency:
          type: string
          default: RON
        currency_rate:
          type: number
          description: Exchange rate to RON (required for foreign currency)
        document_type:
          type: string
          enum: [fiscal, proforma, receipt]
          default: fiscal
        is_draft:
          type: integer
          enum: [0, 1]
          default: 0
          description: 1 to save as draft without invoice number
        efactura_enabled:
          type: integer
          enum: [0, 1]
          default: 1
          description: Whether to submit to e-Factura (Romanian e-invoicing)
        spv_environment:
          type: string
          enum: [test, live]
          description: e-Factura environment (test for SPV testing)
        with_vat_inverted:
          type: integer
          enum: [0, 1]
          default: 0
          description: 1 for reverse charge (taxare inversă)
        payment_method:
          type: string
        payment_type:
          type: string
        payment_installments:
          type: integer
        send_email:
          type: boolean
          default: false
          description: Automatically send invoice by email after creation
        email_address:
          type: string
          format: email
          description: Override recipient email (uses client email if not specified)
        with_delegate:
          type: integer
          enum: [0, 1]
          description: Include delegate information
        delegate:
          type: object
          properties:
            delegate_name:
              type: string
            delegate_ci:
              type: string
            delegate_transport:
              type: string
            delegate_date:
              type: string
              format: date
            delegate_time:
              type: string
        info:
          type: string
          description: Additional invoice information
        observations:
          type: string
          description: Internal notes
        notes:
          type: string
          description: Customer-visible notes
        items:
          type: array
          minItems: 1
          items:
            type: object
            oneOf:
              - required: [description, quantity, price]
              - required: [product_czuid, quantity]
            properties:
              product_czuid:
                type: string
                description: Use existing product from catalog
              description:
                type: string
                description: Item description (required if not using product_czuid)
              description_extended:
                type: string
                description: Extended description
              quantity:
                type: number
                minimum: 0.01
              price:
                type: number
                description: Unit price (can be negative for discounts)
              vat_rate:
                type: number
                default: 19
                enum: [0, 5, 9, 11, 19, 21]
              vat_key:
                type: integer
                description: Override VAT key for special exemptions
              unit:
                type: string
                default: buc
              ubl_um:
                type: string
                description: UBL unit code for e-Factura
              ubl_nc:
                type: string
                description: Combined Nomenclature code
              ubl_cpv:
                type: string
                description: CPV code
              save_as_product:
                type: boolean
                default: false
                description: Save this item as a product in catalog
                
    Product:
      type: object
      required:
        - id
        - object
        - name
        - price
      properties:
        id:
          type: string
          description: Unique identifier (CzUid)
          example: "prod_1a2b3c4d5e"
        object:
          type: string
          default: product
        name:
          type: string
        description:
          type: string
        currency:
          type: string
          default: RON
        price:
          type: number
          description: Selling price without VAT
        purchase_price:
          type: number
          description: Purchase/cost price
        vat_rate:
          type: number
          default: 19
          enum: [0, 5, 9, 11, 19, 21]
        unit_of_measure:
          type: string
          default: buc
        ubl_um:
          type: string
          description: UBL unit of measure code
          default: H87
        ubl_nc:
          type: string
          description: UBL nomenclature code
        ubl_cpv:
          type: string
          description: CPV code
        is_service:
          type: boolean
          default: false
        is_active:
          type: boolean
          default: true
        stock_quantity:
          type: number
          description: Current stock level
        stock_min:
          type: number
          description: Minimum stock alert level
        stock_max:
          type: number
          description: Maximum stock level
        created_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
          
    ProductList:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginationMeta'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Product'
                
    ProductCreateRequest:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        price:
          type: number
          minimum: 0
        purchase_price:
          type: number
          minimum: 0
        currency:
          type: string
          default: RON
        vat_rate:
          type: number
          default: 21
          enum: [0, 5, 9, 11, 19, 21]
        unit_of_measure:
          type: string
          default: buc
        ubl_um:
          type: string
        ubl_nc:
          type: string
        ubl_cpv:
          type: string
        is_service:
          type: boolean
          default: false
        stock_quantity:
          type: number
        stock_min:
          type: number
        stock_max:
          type: number
          
    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          minimum: 0
        purchase_price:
          type: number
          minimum: 0
        currency:
          type: string
        vat_rate:
          type: number
          enum: [0, 5, 9, 11, 19, 21]
        unit_of_measure:
          type: string
        ubl_um:
          type: string
        ubl_nc:
          type: string
        ubl_cpv:
          type: string
        is_service:
          type: boolean
        is_active:
          type: boolean
        stock_quantity:
          type: number
        stock_min:
          type: number
        stock_max:
          type: number
          
    StockAdjustment:
      type: object
      required:
        - quantity
        - type
      properties:
        quantity:
          type: number
          description: Quantity to adjust (positive or negative)
        type:
          type: string
          enum: [add, remove, set]
          description: Type of adjustment (add/remove relative, set absolute)
        reason:
          type: string
          description: Reason for adjustment
        reference:
          type: string
          description: Reference document number
          
    Expense:
      type: object
      required:
        - id
        - reference
        - amount
        - date
        - due_date
        - status
      properties:
        id:
          type: string
          description: Unique identifier (CzUid)
          example: "exp_1a2b3c4d5e"
        reference:
          type: string
          description: Invoice/document reference number
        description:
          type: string
        amount:
          type: object
          properties:
            total:
              type: number
              example: 500.00
            without_vat:
              type: number
            vat:
              type: number
            currency:
              type: string
        account_amount:
          type: object
          description: Amounts in account currency (RON)
          properties:
            total:
              type: number
            without_vat:
              type: number
            vat:
              type: number
            currency:
              type: string
              default: RON
        vat_percent:
          type: integer
          enum: [0, 5, 9, 11, 19, 21]
        with_vat:
          type: boolean
          description: Whether amount includes VAT
        date:
          type: string
          format: date
        due_date:
          type: string
          format: date
        paid_date:
          type: string
          format: date
          nullable: true
        is_paid:
          type: boolean
        payment_type:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            name:
              type: string
        status:
          type: string
          enum: [paid, unpaid, overdue, registered]
        supplier_id:
          type: string
        supplier:
          $ref: '#/components/schemas/Supplier'
        category_id:
          type: integer
        category:
          $ref: '#/components/schemas/ExpenseCategory'
        user_id:
          type: integer
        user:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        currency_exchange:
          type: object
          nullable: true
          properties:
            from:
              type: string
            to:
              type: string
            rate:
              type: number
        attachment:
          type: object
          nullable: true
          description: Single attachment (stored in the 'image' field)
          properties:
            url:
              type: string
            filename:
              type: string
            type:
              type: string
              enum: [pdf, image]
            size:
              type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          
    ExpenseList:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginationMeta'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Expense'
            totals:
              type: object
              description: Aggregated totals for all expenses matching the filters
              properties:
                subtotal:
                  type: number
                  format: float
                  description: Total amount without VAT
                vat:
                  type: number
                  format: float
                  description: Total VAT amount
                total:
                  type: number
                  format: float
                  description: Total amount including VAT
                paid:
                  type: number
                  format: float
                  description: Total amount of paid expenses
                unpaid:
                  type: number
                  format: float
                  description: Total amount of unpaid expenses
            count:
              type: integer
              
    ExpenseCreateRequest:
      type: object
      required:
        - supplier_id
        - amount
        - vat
        - date
      properties:
        supplier_id:
          type: string
          description: Supplier CzUid (required)
        amount:
          type: number
          minimum: 0.01
          description: Amount (required, positive number)
        vat:
          type: integer
          enum: [0, 5, 9, 11, 19, 21]
          description: "VAT percentage (required - accepts: 0, 5, 9, 11, 19, 21)"
        date:
          type: string
          format: date
          description: Expense date (required, Y-m-d format)
        currency:
          type: string
          default: RON
          description: Currency code (optional, defaults to RON)
        due_date:
          type: string
          format: date
          description: Due date (optional, defaults to 30 days from today)
        paid_date:
          type: string
          format: date
          description: Payment date (optional, defaults to today if is_paid=true)
        payment_type:
          type: integer
          minimum: 1
          maximum: 7
          description: |
            Payment type ID 1-7 (optional, defaults to 1 if is_paid=true):
            1 = Cash
            2 = Bank transfer
            3 = Card
            4 = Check
            5 = Promissory note
            6 = Other
            7 = Compensation
        category_id:
          type: integer
          description: Category ID (optional, defaults to 0)
          nullable: true
        reference:
          type: string
          description: Reference number (optional)
        description:
          type: string
          description: Description (optional)
        with_vat:
          type: boolean
          default: false
          description: Whether amount includes VAT (optional, defaults to false)
        is_paid:
          type: boolean
          default: false
          description: Whether expense is paid (optional, defaults to false)
        with_currency_exchange:
          type: boolean
          default: false
          description: Whether to apply currency exchange (optional)
        currency_to:
          type: string
          description: Target currency (if with_currency_exchange)
        currency_rate:
          type: number
          description: Exchange rate (if with_currency_exchange)
          
    ExpenseUpdateRequest:
      type: object
      properties:
        supplier_id:
          type: string
        category_id:
          type: integer
          nullable: true
        reference:
          type: string
        description:
          type: string
        amount:
          type: number
        with_vat:
          type: integer
          enum: [0, 1]
        vat:
          type: integer
          enum: [0, 5, 9, 11, 19, 21]
        currency:
          type: string
        date:
          type: string
          format: date
        due_date:
          type: string
          format: date
        is_paid:
          type: integer
          enum: [0, 1]
        paid_date:
          type: string
          format: date
        payment_type:
          type: integer
          minimum: 1
          maximum: 7
        with_currency_exchange:
          type: integer
          enum: [0, 1]
        currency_to:
          type: string
        currency_rate:
          type: number
          
    ExpenseCategory:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
        name:
          type: string
        parent_id:
          type: integer
          nullable: true
        is_default:
          type: boolean
          description: Whether this is a system default category
        is_visible:
          type: boolean
        type:
          type: string
          enum: [system, custom]
        expense_count:
          type: integer
          description: Number of expenses in this category
        children:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseCategory'
            
    ExpenseCategoryCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        parent_id:
          type: integer
          default: 0
          description: Parent category ID (0 for root)
        is_visible:
          type: integer
          enum: [0, 1]
          default: 1
          
    ExpenseCategoryUpdateRequest:
      type: object
      properties:
        name:
          type: string
        parent_id:
          type: integer
        is_visible:
          type: integer
          enum: [0, 1]
            
    Supplier:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Unique identifier (CzUid)
          example: "sup_1a2b3c4d5e"
        name:
          type: string
        cui:
          type: string
          description: Tax identification number
        rc:
          type: string
          description: Company registration number
        cnp:
          type: string
          description: Personal identification number
        address:
          type: string
        city:
          type: string
        county:
          type: string
        country:
          type: string
        postal_code:
          type: string
        phone:
          type: string
        email:
          type: string
        iban:
          type: string
        bank:
          type: string
        contact_person:
          type: string
        contact_phone:
          type: string
        contact_email:
          type: string
        is_vat_payer:
          type: boolean
        statistics:
          type: object
          properties:
            expense_count:
              type: integer
            total_amount:
              type: number
            paid_amount:
              type: number
            unpaid_amount:
              type: number
        recent_expenses:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              reference:
                type: string
              amount:
                type: number
              currency:
                type: string
              date:
                type: string
                format: date
              is_paid:
                type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          
    SupplierList:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginationMeta'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Supplier'
                
    SupplierCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        cui:
          type: string
          description: Tax identification number
        rc:
          type: string
          description: Company registration number
        cnp:
          type: string
          description: Personal identification number
        address:
          type: string
        city:
          type: string
        county:
          type: string
        country:
          type: string
          default: RO
        postal_code:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        iban:
          type: string
        bank:
          type: string
        contact_person:
          type: string
        contact_phone:
          type: string
        contact_email:
          type: string
          format: email
        is_vat_payer:
          type: boolean
          default: true
          
    SupplierUpdateRequest:
      type: object
      properties:
        name:
          type: string
        cui:
          type: string
        rc:
          type: string
        cnp:
          type: string
        address:
          type: string
        city:
          type: string
        county:
          type: string
        country:
          type: string
        postal_code:
          type: string
        phone:
          type: string
        email:
          type: string
        iban:
          type: string
        bank:
          type: string
        contact_person:
          type: string
        contact_phone:
          type: string
        contact_email:
          type: string
        is_vat_payer:
          type: boolean
          
    Settings:
      type: object
      properties:
        api_version:
          type: string
          example: "v1"
        firm:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            cui:
              type: string
            address:
              type: string
            city:
              type: string
            country:
              type: string
        invoice_series:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              prefix:
                type: string
              next_number:
                type: integer
              is_default:
                type: boolean
        e_factura:
          type: object
          properties:
            enabled:
              type: boolean
            oauth_configured:
              type: boolean
            environment:
              type: string
              enum: [test, live]
        bank_accounts:
          type: array
          items:
            type: object
            properties:
              iban:
                type: string
              bank:
                type: string
              currency:
                type: string
              is_default:
                type: boolean
        currencies:
          type: array
          items:
            type: string
        default_currency:
          type: string
        vat_rates:
          type: array
          items:
            type: integer
        payment_types:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        subscription:
          type: object
          properties:
            plan:
              type: string
            status:
              type: string
            expires_at:
              type: string
              format: date
        features:
          type: object
          properties:
            expenses:
              type: boolean
            efactura:
              type: boolean
            multi_currency:
              type: boolean
            api_access:
              type: boolean
        rate_limits:
          type: object
          properties:
            requests_per_hour:
              type: integer
            creates_per_minute:
              type: integer
            current_usage:
              type: integer
            reset_at:
              type: string
              format: date-time
          
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    MethodNotAllowedError:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    RateLimitError:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

paths:
  # Root endpoint
  /:
    get:
      operationId: getApiInfo
      tags: [Authentication]
      summary: API information
      description: Returns basic API information and status
      security: []
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Contazen API"
                      version:
                        type: string
                        example: "v1"
                      documentation:
                        type: string
                        format: uri
                      status:
                        type: string
                        example: "operational"
  
  # Test endpoints
  /test/public:
    get:
      operationId: testPublic
      tags: [Authentication]
      summary: Public test endpoint
      description: Test endpoint that doesn't require authentication
      security: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          
  /test/protected:
    get:
      operationId: testProtected
      tags: [Authentication]
      summary: Protected test endpoint
      description: Test endpoint that requires authentication
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /test/echo:
    post:
      operationId: testEcho
      tags: [Authentication]
      summary: Echo test endpoint
      description: Echoes back the request data for testing
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                
  /test/rate-limit:
    get:
      operationId: testRateLimit
      tags: [Authentication]
      summary: Test rate limiting
      description: Returns current rate limit status for your API key
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      limit:
                        type: integer
                      remaining:
                        type: integer
                      reset_at:
                        type: string
                        format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
          
  /test/error:
    get:
      operationId: testError
      tags: [Authentication]
      summary: Test error response
      description: Returns a test error for debugging error handling
      security: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            default: api_error
          description: Error type to return
        - name: code
          in: query
          schema:
            type: integer
            default: 400
          description: HTTP status code to return
      responses:
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
  # Clients endpoints
  /clients:
    get:
      operationId: listClients
      tags: [Clients]
      summary: List all clients
      description: Retrieves a paginated list of clients for your firm
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-indexed)
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of items per page
        - name: search
          in: query
          schema:
            type: string
          description: Search term for name, email, or CUI
        - name: is_active
          in: query
          schema:
            type: integer
            enum: [0, 1]
          description: Filter by active status (0=inactive, 1=active)
        - name: type
          in: query
          schema:
            type: string
            enum: [person, company]
          description: Filter by client type
        - name: sort
          in: query
          schema:
            type: string
            enum: [name, created_at, modified_at]
            default: name
          description: Sort field
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ClientList'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    post:
      operationId: createClient
      tags: [Clients]
      summary: Create a client
      description: Creates a new client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreateRequest'
      responses:
        '201':
          description: Client created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Client'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /clients/{id}:
    get:
      operationId: getClient
      tags: [Clients]
      summary: Retrieve a client
      description: Get a specific client by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Client CzUid (e.g., cli_1a2b3c4d5e)
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Client'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    put:
      operationId: updateClient
      tags: [Clients]
      summary: Update a client
      description: Updates an existing client
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Client CzUid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdateRequest'
      responses:
        '200':
          description: Client updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Client'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    delete:
      operationId: deleteClient
      tags: [Clients]
      summary: Delete a client
      description: Deletes a client (soft delete, cannot delete if has associated invoices)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Client CzUid
      responses:
        '200':
          description: Client deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Cannot delete client with existing invoices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  # Invoices endpoints
  /invoices:
    get:
      operationId: listInvoices
      tags: [Invoices]
      summary: List all invoices
      description: |
        Retrieves a paginated list of invoices with optional filters and expansion.
        
        ## Filtering
        Use query parameters to filter invoices by various criteria.
        
        ## Expanding Objects
        Use the `expand[]` parameter to include related objects:
        - `expand[]=lines` - Include invoice line items
        - `expand[]=payments` - Include payment records
        - `expand[]=client` - Include full client object
        - `expand[]=efactura` - Include e-Factura submission details
        
        ## Totals
        The response includes aggregated totals for all invoices matching your filters.
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Items per page
        - name: client_id
          in: query
          schema:
            type: string
          description: Filter by client CzUid
        - name: series_id
          in: query
          schema:
            type: string
          description: Filter by series CzUid
        - name: is_paid
          in: query
          description: |
            Filter by payment status (0=unpaid, 1=paid).
            Note: This filter excludes voided and storno invoices.
          schema:
            type: integer
            enum: [0, 1]
        - name: is_void
          in: query
          schema:
            type: integer
            enum: [0, 1]
          description: Filter by void status
        - name: document_type
          in: query
          schema:
            type: string
            enum: [fiscal, proforma, receipt]
          description: Filter by document type
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, sent, paid, overdue, cancelled]
          description: Filter by status
        - name: currency
          in: query
          schema:
            type: string
          description: Filter by currency code (e.g., RON, EUR, USD)
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD)
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD)
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at, date, due_date, total, number]
            default: created_at
          description: Sort field
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
        - name: expand[]
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [lines, payments, client, efactura]
          style: form
          explode: true
          description: Expand nested objects
      responses:
        '200':
          description: List of invoices
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/InvoiceList'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    post:
      operationId: createInvoice
      tags: [Invoices]
      summary: Create an invoice
      description: |
        Creates a new invoice with flexible client handling and item management.
        
        ## Client Handling
        You can either:
        - Use an existing client with `client_id`
        - Create/find a client inline with `client_data`
        
        For B2B clients with the same CUI, the system will automatically reuse the existing client.
        
        ## Product Integration
        Invoice items can be:
        - Linked to existing products using `product_czuid`
        - Created as one-off items
        - Saved as new products with `save_as_product: true`
        
        ## E-Factura
        Romanian e-invoicing is enabled by default. Include UBL codes for compliance.
        
        ## Email Automation
        Set `send_email: true` to automatically send the invoice after creation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceCreateRequest'
      responses:
        '201':
          description: Invoice created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Invoice'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /invoices/{id}:
    get:
      operationId: getInvoice
      tags: [Invoices]
      summary: Retrieve an invoice
      description: Get a specific invoice by ID with optional expansion of related objects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Invoice CzUid
        - name: expand[]
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [lines, payments, client, efactura]
          style: form
          explode: true
          description: Expand nested objects
      responses:
        '200':
          description: Invoice details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Invoice'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    delete:
      operationId: deleteInvoice
      tags: [Invoices]
      summary: Delete an invoice
      description: |
        Deletes an invoice. The invoice must be either a draft or voided before it can be deleted.
        For voided invoices with sequential numbers, only the last invoice in the series can be deleted
        to maintain number sequence integrity.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Invoice CzUid
      responses:
        '200':
          description: Invoice deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      object:
                        type: string
                        example: invoice
                      id:
                        type: string
                        description: CzUid of deleted invoice
                      deleted:
                        type: boolean
                        example: true
                      deleted_at:
                        type: string
                        format: date-time
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          description: Invoice cannot be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/MethodNotAllowedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /invoices/{id}/pdf:
    get:
      operationId: getInvoicePdf
      tags: [Invoices]
      summary: Download invoice PDF
      description: |
        Get invoice PDF file or download URL.
        
        ## Response Modes
        - `download` (default): Returns the PDF file directly
        - `url`: Returns a JSON response with a temporary download URL
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Invoice CzUid
        - name: mode
          in: query
          schema:
            type: string
            enum: [download, url]
            default: download
          description: Response mode - direct download or URL
      responses:
        '200':
          description: PDF file or URL
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        format: uri
                      expires_at:
                        type: integer
                        format: timestamp
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /invoices/{id}/send:
    post:
      operationId: sendInvoice
      tags: [Invoices]
      summary: Send invoice by email
      description: Send invoice to client via email with optional customization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Invoice CzUid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Override recipient email (uses client email if not specified)
                cc:
                  type: string
                  format: email
                  description: CC email address
                subject:
                  type: string
                  description: Custom email subject
                message:
                  type: string
                  description: Custom email message
      responses:
        '200':
          description: Invoice sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /invoices/{id}/pay:
    post:
      operationId: payInvoice
      tags: [Invoices]
      summary: Mark invoice as paid
      description: |
        Record a payment for an invoice.
        
        ## Payment Recording
        - Full payment: Invoice is marked as paid
        - Partial payment: Invoice remains unpaid with updated balance
        - Already paid invoices cannot accept additional payments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Invoice CzUid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - payment_date
              properties:
                amount:
                  type: number
                  description: Payment amount
                payment_date:
                  type: string
                  format: date
                  description: Payment date (defaults to today)
                payment_method:
                  type: string
                  description: Payment method used
                observations:
                  type: string
                  description: Payment notes
      responses:
        '200':
          description: Payment recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      is_paid:
                        type: boolean
                      total_amount:
                        type: number
                      total_paid:
                        type: number
                      remaining:
                        type: number
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          description: Cannot pay - invoice already paid or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /invoices/{id}/void:
    post:
      operationId: voidInvoice
      tags: [Invoices]
      summary: Void an invoice
      description: |
        Void (cancel) an invoice following Romanian accounting regulations.
        
        ## Voiding Process
        - Fiscal invoices with numbers: Creates a storno (reversal) invoice
        - Draft invoices: Simply marked as cancelled
        - Voided invoices cannot be edited or sent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Invoice CzUid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for voiding
      responses:
        '200':
          description: Invoice voided
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Invoice'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /invoices/{id}/unvoid:
    post:
      operationId: unvoidInvoice
      tags: [Invoices]
      summary: Unvoid an invoice
      description: Restore a voided invoice to its previous state
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Invoice CzUid
      responses:
        '200':
          description: Invoice restored
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Invoice'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /invoices/{id}/send-to-spv:
    post:
      operationId: sendInvoiceToSpv
      tags: [Invoices]
      summary: Send invoice to e-Factura SPV
      description: |
        Submit invoice to Romanian e-Factura system (SPV).
        
        ## Requirements
        - Firm must have OAuth configured for e-Factura
        - Invoice must have e-Factura enabled
        - Client must have valid Romanian CUI
        
        ## Environments
        - `test`: SPV test environment for testing
        - `live`: Production ANAF system
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Invoice CzUid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                test_mode:
                  type: boolean
                  default: false
                  description: Use SPV test environment
      responses:
        '200':
          description: Invoice sent to SPV
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      submission_id:
                        type: string
                      status:
                        type: string
                      message:
                        type: string
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          description: OAuth not configured or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  # Products endpoints
  /products:
    get:
      operationId: listProducts
      tags: [Products]
      summary: List all products
      description: Retrieves a paginated list of products and services
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Items per page
        - name: search
          in: query
          schema:
            type: string
          description: Search in name and description
        - name: is_service
          in: query
          schema:
            type: integer
            enum: [0, 1]
          description: Filter by product type (0=product, 1=service)
        - name: is_active
          in: query
          schema:
            type: integer
            enum: [0, 1]
          description: Filter by active status
        - name: currency
          in: query
          schema:
            type: string
          description: Filter by currency
        - name: sort
          in: query
          schema:
            type: string
            enum: [name, price, created_at]
            default: name
          description: Sort field
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ProductList'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    post:
      operationId: createProduct
      tags: [Products]
      summary: Create a product
      description: Creates a new product or service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /products/{id}:
    get:
      operationId: getProduct
      tags: [Products]
      summary: Retrieve a product
      description: Get a specific product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Product CzUid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    put:
      operationId: updateProduct
      tags: [Products]
      summary: Update a product
      description: Updates an existing product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Product CzUid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    delete:
      operationId: deleteProduct
      tags: [Products]
      summary: Delete a product
      description: Deletes a product (soft delete, cannot delete if used in invoices)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Product CzUid
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Cannot delete product in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /products/{id}/stock:
    post:
      operationId: adjustProductStock
      tags: [Products]
      summary: Adjust product stock
      description: |
        Adjust product stock levels.
        
        ## Adjustment Types
        - `add`: Add to current stock
        - `remove`: Remove from current stock
        - `set`: Set absolute stock level
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Product CzUid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockAdjustment'
      responses:
        '200':
          description: Stock adjusted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      previous_quantity:
                        type: number
                      new_quantity:
                        type: number
                      adjustment:
                        type: number
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          description: Invalid adjustment (e.g., negative stock)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  # Expenses endpoints
  /expenses:
    get:
      operationId: listExpenses
      tags: [Expenses]
      summary: List all expenses
      description: Retrieves a paginated list of expenses with optional filters
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Items per page
        - name: supplier_id
          in: query
          schema:
            type: string
          description: Filter by supplier CzUid
        - name: category_id
          in: query
          schema:
            type: integer
          description: Filter by category ID
        - name: status
          in: query
          schema:
            type: string
            enum: [paid, unpaid, overdue, registered]
          description: Filter by payment status
        - name: currency
          in: query
          schema:
            type: string
          description: Filter by currency code
        - name: payment_type
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 7
          description: |
            Filter by payment type:
            1 = Cash
            2 = Bank transfer
            3 = Card
            4 = Check
            5 = Promissory note
            6 = Other
            7 = Compensation
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD)
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD)
        - name: min_amount
          in: query
          schema:
            type: number
          description: Minimum amount filter
        - name: max_amount
          in: query
          schema:
            type: number
          description: Maximum amount filter
        - name: search
          in: query
          schema:
            type: string
          description: Search in reference and description
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at, date, due_date, amount]
            default: date
          description: Sort field
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
        - name: expand
          in: query
          schema:
            type: string
          description: "Comma-separated list (supplier,category,user,attachment) - Note: attachment is singular as each expense supports only one attachment"
      responses:
        '200':
          description: List of expenses
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ExpenseList'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    post:
      operationId: createExpense
      tags: [Expenses]
      summary: Create an expense
      description: |
        Creates a new expense record with minimal required fields.
        
        ## Required Fields (only 4)
        - `supplier_id`: Supplier CzUid (required)
        - `amount`: Amount (required, positive number) 
        - `vat`: VAT percentage (required - accepts 0, 5, 9, 11, 19, 21)
        - `date`: Date in Y-m-d format (required)
        
        ## Optional Fields with Smart Defaults
        - `currency`: Currency code (defaults to RON)
        - `due_date`: Due date (defaults to 30 days from today)
        - `paid_date`: Payment date (defaults to today if is_paid=true)
        - `payment_type`: Payment type ID 1-7 (defaults to 1 if is_paid=true)
        - `category_id`: Category ID (defaults to 0)
        - `reference`: Reference number
        - `description`: Description
        - `with_vat`: Whether amount includes VAT (defaults to false)
        - `is_paid`: Whether expense is paid (defaults to false)
        - `with_currency_exchange`: Boolean for currency exchange
        - `currency_to`: Target currency (if with_currency_exchange)
        - `currency_rate`: Exchange rate (if with_currency_exchange)
        
        ## VAT Rates
        Supported VAT rates: 0%, 5%, 9%, 11%, 19%, 21% (21% is standard in Romania)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCreateRequest'
      responses:
        '201':
          description: Expense created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Expense'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /expenses/export:
    get:
      operationId: exportExpenses
      tags: [Expenses]
      summary: Export expenses to CSV
      description: Export expenses to CSV format with optional filters
      parameters:
        - name: supplier_id
          in: query
          schema:
            type: string
          description: Filter by supplier CzUid
        - name: category_id
          in: query
          schema:
            type: integer
          description: Filter by category ID
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: Start date (Y-m-d format)
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: End date (Y-m-d format)
        - name: status
          in: query
          schema:
            type: string
            enum: [paid, unpaid, overdue]
          description: Filter by payment status
      responses:
        '200':
          description: CSV export file
          content:
            text/csv:
              schema:
                type: string
                format: binary
              examples:
                csv_export:
                  summary: CSV file with expense data
                  description: Returns a CSV file with all expense data matching the filters
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /expenses/{id}:
    get:
      operationId: getExpense
      tags: [Expenses]
      summary: Retrieve an expense
      description: Get a specific expense by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Expense CzUid
        - name: expand
          in: query
          schema:
            type: string
          description: "Comma-separated list (supplier,category,user,attachment) - Note: attachment is singular as each expense supports only one attachment"
      responses:
        '200':
          description: Expense details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Expense'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    put:
      operationId: updateExpense
      tags: [Expenses]
      summary: Update an expense
      description: Updates an existing expense
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Expense CzUid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseUpdateRequest'
      responses:
        '200':
          description: Expense updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Expense'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    delete:
      operationId: deleteExpense
      tags: [Expenses]
      summary: Delete an expense
      description: |
        Permanently deletes an expense (hard delete, not soft delete).
        
        ## Important Notes
        - This is a HARD delete operation - the expense is permanently removed
        - Unlike other entities that use soft delete, expenses are completely removed from the database
        - Cannot be undone once deleted
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Expense CzUid
      responses:
        '200':
          description: Expense deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /expenses/{id}/pay:
    post:
      operationId: payExpense
      tags: [Expenses]
      summary: Mark expense as paid
      description: Mark an expense as paid
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Expense CzUid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paid_date
                - payment_type
              properties:
                paid_date:
                  type: string
                  format: date
                  description: Payment date
                payment_type:
                  type: integer
                  minimum: 1
                  maximum: 7
                  description: Payment method (1-7)
      responses:
        '200':
          description: Expense marked as paid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Expense'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /expenses/{id}/attachments:
    post:
      operationId: uploadExpenseAttachment
      tags: [Expenses]
      summary: Upload expense attachment
      description: |
        Upload a single PDF or image attachment for an expense. Each expense supports only ONE attachment (stored in the 'image' field).
        
        ## File Requirements
        - Supported types: PDF, JPG, JPEG, PNG
        - Maximum file size: 10MB
        - Only one attachment per expense
        
        ## Important Notes
        - Uploading a new file will replace any existing attachment
        - Creates a default supplier if the expense doesn't have one
        - There is NO GET endpoint for listing attachments (single attachment only)
        - There is NO DELETE endpoint for removing attachments individually
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Expense CzUid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: PDF or image file (max 10MB)
      responses:
        '200':
          description: Attachment uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      filename:
                        type: string
                      url:
                        type: string
                      size:
                        type: integer
                      type:
                        type: string
                        enum: [pdf, image]
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          description: Invalid file or size limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  # Expense Categories endpoints
  /expense-categories:
    get:
      operationId: listExpenseCategories
      tags: [Expense Categories]
      summary: List expense categories
      description: Get all expense categories with optional hierarchy
      parameters:
        - name: parent_id
          in: query
          schema:
            type: integer
          description: Filter by parent category ID (0 for root categories)
        - name: include_children
          in: query
          schema:
            type: boolean
            default: false
          description: Include child categories in response
        - name: include_system
          in: query
          schema:
            type: boolean
            default: true
          description: Include system default categories
        - name: is_visible
          in: query
          schema:
            type: integer
            enum: [0, 1]
          description: Filter by visibility
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExpenseCategory'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    post:
      operationId: createExpenseCategory
      tags: [Expense Categories]
      summary: Create expense category
      description: Create a custom expense category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCategoryCreateRequest'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ExpenseCategory'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /expense-categories/{id}:
    get:
      operationId: getExpenseCategory
      tags: [Expense Categories]
      summary: Get category details
      description: Get a specific expense category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Category ID
        - name: include_children
          in: query
          schema:
            type: boolean
            default: false
          description: Include child categories
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ExpenseCategory'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    put:
      operationId: updateExpenseCategory
      tags: [Expense Categories]
      summary: Update expense category
      description: Update a custom expense category (cannot modify system categories)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Category ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCategoryUpdateRequest'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ExpenseCategory'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '403':
          description: Cannot modify system categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    delete:
      operationId: deleteExpenseCategory
      tags: [Expense Categories]
      summary: Delete expense category
      description: Delete a custom expense category (cannot delete system categories or categories with expenses)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Category ID
      responses:
        '200':
          description: Category deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '403':
          description: Cannot delete system categories or categories with expenses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  # Suppliers endpoints
  /suppliers:
    get:
      operationId: listSuppliers
      tags: [Suppliers]
      summary: List all suppliers
      description: Retrieves a paginated list of suppliers
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Items per page
        - name: search
          in: query
          schema:
            type: string
          description: Search in name, CUI, email
        - name: country
          in: query
          schema:
            type: string
          description: Filter by country code
        - name: is_vat_payer
          in: query
          schema:
            type: integer
            enum: [0, 1]
          description: Filter by VAT payer status
        - name: has_expenses
          in: query
          schema:
            type: boolean
          description: Only suppliers with expenses
        - name: sort
          in: query
          schema:
            type: string
            enum: [name, created_at, usage]
            default: name
          description: Sort field
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order
        - name: expand
          in: query
          schema:
            type: string
          description: Comma-separated list (statistics,recent_expenses)
      responses:
        '200':
          description: List of suppliers
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/SupplierList'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    post:
      operationId: createSupplier
      tags: [Suppliers]
      summary: Create a supplier
      description: Creates a new supplier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierCreateRequest'
      responses:
        '201':
          description: Supplier created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Supplier'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /suppliers/{id}:
    get:
      operationId: getSupplier
      tags: [Suppliers]
      summary: Retrieve a supplier
      description: Get a specific supplier by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Supplier CzUid
        - name: expand
          in: query
          schema:
            type: string
          description: Comma-separated list (statistics,recent_expenses)
      responses:
        '200':
          description: Supplier details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Supplier'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    put:
      operationId: updateSupplier
      tags: [Suppliers]
      summary: Update a supplier
      description: Updates an existing supplier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Supplier CzUid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplierUpdateRequest'
      responses:
        '200':
          description: Supplier updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Supplier'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
    delete:
      operationId: deleteSupplier
      tags: [Suppliers]
      summary: Delete a supplier
      description: Permanently deletes a supplier (hard delete, only if no associated expenses)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Supplier CzUid
      responses:
        '200':
          description: Supplier deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Cannot delete supplier with existing expenses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  # Settings endpoint
  /settings:
    get:
      operationId: getSettings
      tags: [Settings]
      summary: Get API settings
      description: |
        Get current API settings, configuration, and account information.
        
        This endpoint provides comprehensive information about:
        - API version and rate limits
        - Firm details and configuration
        - Invoice series and numbering
        - E-Factura setup status
        - Available features and subscription
        - Supported currencies and VAT rates
      responses:
        '200':
          description: API settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Settings'
                  meta:
                    $ref: '#/components/schemas/ResponseMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'